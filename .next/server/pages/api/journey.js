"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/journey";
exports.ids = ["pages/api/journey"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fjourney&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fjourney.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fjourney&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fjourney.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_journey_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages/api/journey.ts */ \"(api-node)/./pages/api/journey.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_journey_ts__WEBPACK_IMPORTED_MODULE_4__]);\n_pages_api_journey_ts__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_journey_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_journey_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/journey\",\n        pathname: \"/api/journey\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_journey_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    projectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/journey\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: undefined,\n                multiZoneDraftMode: Boolean(\"false\"),\n                trustHostHeader: undefined,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/journey\",\n                projectDir:  false || '',\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fjourney&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fjourney.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/journey.ts":
/*!******************************!*\
  !*** ./pages/api/journey.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nconst TFNSW_API_KEY = process.env.TFNSW_API_KEY;\nconst TFNSW_API_URL = 'https://api.transport.nsw.gov.au/v1/tp/trip';\n// Basic station coordinates (expand this list)\nconst stationCoordinates = {\n    // CBD & Inner City\n    'Central': {\n        lat: -33.8833,\n        lng: 151.2056\n    },\n    'Town Hall': {\n        lat: -33.8736,\n        lng: 151.2071\n    },\n    'Wynyard': {\n        lat: -33.8657,\n        lng: 151.2056\n    },\n    'Circular Quay': {\n        lat: -33.8615,\n        lng: 151.2119\n    },\n    'St James': {\n        lat: -33.8708,\n        lng: 151.2128\n    },\n    'Museum': {\n        lat: -33.8744,\n        lng: 151.2128\n    },\n    'Martin Place': {\n        lat: -33.8673,\n        lng: 151.2103\n    },\n    'Kings Cross': {\n        lat: -33.8756,\n        lng: 151.2225\n    },\n    'Redfern': {\n        lat: -33.8933,\n        lng: 151.2033\n    },\n    'Green Square': {\n        lat: -33.9123,\n        lng: 151.2067\n    },\n    'Mascot': {\n        lat: -33.9264,\n        lng: 151.1958\n    },\n    'Wolli Creek': {\n        lat: -33.9278,\n        lng: 151.1544\n    },\n    // Eastern Suburbs\n    'Edgecliff': {\n        lat: -33.8772,\n        lng: 151.2394\n    },\n    'Bondi Junction': {\n        lat: -33.8916,\n        lng: 151.2478\n    },\n    'Waverley': {\n        lat: -33.9033,\n        lng: 151.2567\n    },\n    'Bronte': {\n        lat: -33.9042,\n        lng: 151.2667\n    },\n    'Tamarama': {\n        lat: -33.9056,\n        lng: 151.2700\n    },\n    'Bondi Beach': {\n        lat: -33.8915,\n        lng: 151.2767\n    },\n    // North Shore\n    'North Sydney': {\n        lat: -33.8424,\n        lng: 151.2067\n    },\n    'Milsons Point': {\n        lat: -33.8456,\n        lng: 151.2114\n    },\n    'Waverton': {\n        lat: -33.8378,\n        lng: 151.2019\n    },\n    'Wollstonecraft': {\n        lat: -33.8314,\n        lng: 151.1986\n    },\n    'St Leonards': {\n        lat: -33.8247,\n        lng: 151.1975\n    },\n    'Artarmon': {\n        lat: -33.8089,\n        lng: 151.1856\n    },\n    'Chatswood': {\n        lat: -33.7969,\n        lng: 151.1828\n    },\n    'Roseville': {\n        lat: -33.7836,\n        lng: 151.1814\n    },\n    'Lindfield': {\n        lat: -33.7786,\n        lng: 151.1719\n    },\n    'Killara': {\n        lat: -33.7681,\n        lng: 151.1631\n    },\n    'Gordon': {\n        lat: -33.7564,\n        lng: 151.1544\n    },\n    'Pymble': {\n        lat: -33.7444,\n        lng: 151.1442\n    },\n    'Turramurra': {\n        lat: -33.7367,\n        lng: 151.1314\n    },\n    'Warrawee': {\n        lat: -33.7281,\n        lng: 151.1217\n    },\n    'Wahroonga': {\n        lat: -33.7181,\n        lng: 151.1158\n    },\n    'Hornsby': {\n        lat: -33.7030,\n        lng: 151.0985\n    },\n    // Inner West\n    'Newtown': {\n        lat: -33.8978,\n        lng: 151.1797\n    },\n    'Macdonaldtown': {\n        lat: -33.8983,\n        lng: 151.1731\n    },\n    'Stanmore': {\n        lat: -33.8958,\n        lng: 151.1656\n    },\n    'Petersham': {\n        lat: -33.8950,\n        lng: 151.1567\n    },\n    'Lewisham': {\n        lat: -33.8967,\n        lng: 151.1492\n    },\n    'Summer Hill': {\n        lat: -33.8942,\n        lng: 151.1403\n    },\n    'Ashfield': {\n        lat: -33.8886,\n        lng: 151.1289\n    },\n    'Burwood': {\n        lat: -33.8828,\n        lng: 151.1042\n    },\n    'Strathfield': {\n        lat: -33.8736,\n        lng: 151.0942\n    },\n    'Homebush': {\n        lat: -33.8642,\n        lng: 151.0825\n    },\n    'Flemington': {\n        lat: -33.8586,\n        lng: 151.0714\n    },\n    'Lidcombe': {\n        lat: -33.8644,\n        lng: 151.0431\n    },\n    'Auburn': {\n        lat: -33.8489,\n        lng: 151.0325\n    },\n    'Granville': {\n        lat: -33.8306,\n        lng: 151.0114\n    },\n    'Clyde': {\n        lat: -33.8269,\n        lng: 151.0094\n    },\n    'Parramatta': {\n        lat: -33.8151,\n        lng: 151.0012\n    },\n    'Harris Park': {\n        lat: -33.8208,\n        lng: 150.9906\n    },\n    'Westmead': {\n        lat: -33.8072,\n        lng: 150.9881\n    },\n    'Wentworthville': {\n        lat: -33.8067,\n        lng: 150.9711\n    },\n    'Toongabbie': {\n        lat: -33.7886,\n        lng: 150.9481\n    },\n    'Seven Hills': {\n        lat: -33.7742,\n        lng: 150.9350\n    },\n    'Blacktown': {\n        lat: -33.7692,\n        lng: 150.9051\n    },\n    'Doonside': {\n        lat: -33.7594,\n        lng: 150.8700\n    },\n    'Rooty Hill': {\n        lat: -33.7658,\n        lng: 150.8436\n    },\n    'Mount Druitt': {\n        lat: -33.7683,\n        lng: 150.8181\n    },\n    'St Marys': {\n        lat: -33.7700,\n        lng: 150.7744\n    },\n    'Werrington': {\n        lat: -33.7533,\n        lng: 150.7506\n    },\n    'Kingswood': {\n        lat: -33.7533,\n        lng: 150.7267\n    },\n    'Penrith': {\n        lat: -33.7507,\n        lng: 150.6956\n    },\n    // Southern Line\n    'Arncliffe': {\n        lat: -33.9378,\n        lng: 151.1467\n    },\n    'Rockdale': {\n        lat: -33.9531,\n        lng: 151.1397\n    },\n    'Kogarah': {\n        lat: -33.9653,\n        lng: 151.1339\n    },\n    'Carlton': {\n        lat: -33.9700,\n        lng: 151.1256\n    },\n    'Allawah': {\n        lat: -33.9739,\n        lng: 151.1156\n    },\n    'Hurstville': {\n        lat: -33.9680,\n        lng: 151.1036\n    },\n    'Penshurst': {\n        lat: -33.9658,\n        lng: 151.0872\n    },\n    'Mortdale': {\n        lat: -33.9736,\n        lng: 151.0725\n    },\n    'Oatley': {\n        lat: -33.9831,\n        lng: 151.0756\n    },\n    'Como': {\n        lat: -33.9983,\n        lng: 151.0653\n    },\n    'Jannali': {\n        lat: -34.0208,\n        lng: 151.0653\n    },\n    'Sutherland': {\n        lat: -34.0308,\n        lng: 151.0583\n    },\n    'Gymea': {\n        lat: -34.0358,\n        lng: 151.0856\n    },\n    'Miranda': {\n        lat: -34.0347,\n        lng: 151.1022\n    },\n    'Caringbah': {\n        lat: -34.0417,\n        lng: 151.1239\n    },\n    'Woolooware': {\n        lat: -34.0444,\n        lng: 151.1431\n    },\n    'Cronulla': {\n        lat: -34.0561,\n        lng: 151.1522\n    },\n    // Bankstown Line\n    'Bankstown': {\n        lat: -33.9181,\n        lng: 150.9347\n    },\n    'Yagoona': {\n        lat: -33.9072,\n        lng: 151.0203\n    },\n    'Birrong': {\n        lat: -33.8944,\n        lng: 151.0150\n    },\n    'Regents Park': {\n        lat: -33.8847,\n        lng: 151.0289\n    },\n    'Berala': {\n        lat: -33.8708,\n        lng: 151.0311\n    },\n    'Sefton': {\n        lat: -33.8797,\n        lng: 151.0097\n    },\n    'Chester Hill': {\n        lat: -33.8697,\n        lng: 150.9944\n    },\n    'Leightonfield': {\n        lat: -33.8683,\n        lng: 150.9822\n    },\n    'Villawood': {\n        lat: -33.8681,\n        lng: 150.9744\n    },\n    'Carramar': {\n        lat: -33.8650,\n        lng: 150.9583\n    },\n    'Cabramatta': {\n        lat: -33.8942,\n        lng: 150.9364\n    },\n    'Warwick Farm': {\n        lat: -33.9128,\n        lng: 150.9361\n    },\n    'Liverpool': {\n        lat: -33.9242,\n        lng: 150.9239\n    },\n    'Casula': {\n        lat: -33.9506,\n        lng: 150.9086\n    },\n    'Glenfield': {\n        lat: -33.9714,\n        lng: 150.8919\n    },\n    'Macquarie Fields': {\n        lat: -33.9861,\n        lng: 150.8736\n    },\n    'Ingleburn': {\n        lat: -34.0042,\n        lng: 150.8608\n    },\n    'Minto': {\n        lat: -34.0264,\n        lng: 150.8453\n    },\n    'Leumeah': {\n        lat: -34.0531,\n        lng: 150.8381\n    },\n    'Campbelltown': {\n        lat: -34.0639,\n        lng: 150.8142\n    },\n    // Blue Mountains\n    'Emu Plains': {\n        lat: -33.7517,\n        lng: 150.6708\n    },\n    'Leonay': {\n        lat: -33.7486,\n        lng: 150.6467\n    },\n    'Faulconbridge': {\n        lat: -33.7003,\n        lng: 150.5414\n    },\n    'Springwood': {\n        lat: -33.7014,\n        lng: 150.5508\n    },\n    'Valley Heights': {\n        lat: -33.7097,\n        lng: 150.5269\n    },\n    'Katoomba': {\n        lat: -33.7128,\n        lng: 150.3119\n    },\n    'Leura': {\n        lat: -33.7131,\n        lng: 150.3333\n    },\n    'Wentworth Falls': {\n        lat: -33.7067,\n        lng: 150.3756\n    },\n    'Bullaburra': {\n        lat: -33.7331,\n        lng: 150.4156\n    },\n    'Lawson': {\n        lat: -33.7256,\n        lng: 150.4297\n    },\n    'Hazelbrook': {\n        lat: -33.7275,\n        lng: 150.4558\n    },\n    'Woodford': {\n        lat: -33.7314,\n        lng: 150.4747\n    },\n    'Linden': {\n        lat: -33.7336,\n        lng: 150.4958\n    },\n    'Glenbrook': {\n        lat: -33.7728,\n        lng: 150.6239\n    },\n    'Blaxland': {\n        lat: -33.7447,\n        lng: 150.6069\n    },\n    'Warrimoo': {\n        lat: -33.7250,\n        lng: 150.5969\n    },\n    'Sun Valley': {\n        lat: -33.7128,\n        lng: 150.5853\n    },\n    'Winmalee': {\n        lat: -33.6856,\n        lng: 150.5931\n    },\n    'Hawkesbury River': {\n        lat: -33.5514,\n        lng: 150.9981\n    },\n    'Wondabyne': {\n        lat: -33.4997,\n        lng: 151.2272\n    },\n    'Cowan': {\n        lat: -33.5992,\n        lng: 151.1481\n    },\n    'Berowra': {\n        lat: -33.6264,\n        lng: 151.1506\n    },\n    'Mount Kuring-gai': {\n        lat: -33.6536,\n        lng: 151.1372\n    },\n    'Mount Colah': {\n        lat: -33.6753,\n        lng: 151.1203\n    },\n    'Asquith': {\n        lat: -33.6906,\n        lng: 151.1103\n    },\n    'Beecroft': {\n        lat: -33.7489,\n        lng: 151.0675\n    },\n    'Cheltenham': {\n        lat: -33.7600,\n        lng: 151.0811\n    },\n    'Pennant Hills': {\n        lat: -33.7381,\n        lng: 151.0736\n    },\n    'Thornleigh': {\n        lat: -33.7314,\n        lng: 151.0792\n    },\n    'Normanhurst': {\n        lat: -33.7208,\n        lng: 151.0947\n    },\n    'Waitara': {\n        lat: -33.7089,\n        lng: 151.1044\n    },\n    // Metro Northwest\n    'Epping': {\n        lat: -33.7725,\n        lng: 151.0818\n    },\n    'Eastwood': {\n        lat: -33.7897,\n        lng: 151.0814\n    },\n    'Denistone East': {\n        lat: -33.7939,\n        lng: 151.0931\n    },\n    'West Ryde': {\n        lat: -33.8053,\n        lng: 151.0944\n    },\n    'Meadowbank': {\n        lat: -33.8158,\n        lng: 151.0911\n    },\n    'Rhodes': {\n        lat: -33.8283,\n        lng: 151.0861\n    },\n    'Concord West': {\n        lat: -33.8497,\n        lng: 151.0864\n    },\n    'North Strathfield': {\n        lat: -33.8556,\n        lng: 151.0944\n    },\n    'Macquarie University': {\n        lat: -33.7742,\n        lng: 151.1117\n    },\n    'Macquarie Park': {\n        lat: -33.7769,\n        lng: 151.1239\n    },\n    'North Ryde': {\n        lat: -33.7975,\n        lng: 151.1261\n    },\n    'Cherrybrook': {\n        lat: -33.7278,\n        lng: 151.0497\n    },\n    'Castle Hill': {\n        lat: -33.7314,\n        lng: 151.0039\n    },\n    'Showground': {\n        lat: -33.7369,\n        lng: 150.9842\n    },\n    'Kellyville': {\n        lat: -33.7169,\n        lng: 150.9642\n    },\n    'Rouse Hill': {\n        lat: -33.6831,\n        lng: 150.9147\n    },\n    'Bella Vista': {\n        lat: -33.7339,\n        lng: 150.9508\n    },\n    'Norwest': {\n        lat: -33.7286,\n        lng: 150.9789\n    },\n    'Tallawong': {\n        lat: -33.6789,\n        lng: 150.9061\n    },\n    // Illawarra Line\n    'Helensburgh': {\n        lat: -34.1772,\n        lng: 150.9933\n    },\n    'Otford': {\n        lat: -34.2108,\n        lng: 151.0069\n    },\n    'Stanwell Park': {\n        lat: -34.2222,\n        lng: 150.9897\n    },\n    'Coalcliff': {\n        lat: -34.2353,\n        lng: 150.9694\n    },\n    'Scarborough': {\n        lat: -34.2497,\n        lng: 150.9408\n    },\n    'Wombarra': {\n        lat: -34.2686,\n        lng: 150.9292\n    },\n    'Coledale': {\n        lat: -34.2936,\n        lng: 150.9347\n    },\n    'Austinmer': {\n        lat: -34.3081,\n        lng: 150.9314\n    },\n    'Thirroul': {\n        lat: -34.3156,\n        lng: 150.9217\n    },\n    'Bulli': {\n        lat: -34.3394,\n        lng: 150.9181\n    },\n    'Woonona': {\n        lat: -34.3469,\n        lng: 150.9047\n    },\n    'Bellambi': {\n        lat: -34.3683,\n        lng: 150.9089\n    },\n    'Corrimal': {\n        lat: -34.3742,\n        lng: 150.9000\n    },\n    'Towradgi': {\n        lat: -34.3856,\n        lng: 150.9058\n    },\n    'Fairy Meadow': {\n        lat: -34.3958,\n        lng: 150.9031\n    },\n    'North Wollongong': {\n        lat: -34.4086,\n        lng: 150.8931\n    },\n    'Wollongong': {\n        lat: -34.4242,\n        lng: 150.8931\n    },\n    'Coniston': {\n        lat: -34.4544,\n        lng: 150.8825\n    },\n    'Spring Hill': {\n        lat: -34.4728,\n        lng: 150.8708\n    },\n    'Unanderra': {\n        lat: -34.4583,\n        lng: 150.8361\n    },\n    'Kembla Grange': {\n        lat: -34.4758,\n        lng: 150.8144\n    },\n    'Dapto': {\n        lat: -34.4986,\n        lng: 150.7925\n    },\n    'Albion Park': {\n        lat: -34.5656,\n        lng: 150.7831\n    },\n    'Bomaderry': {\n        lat: -34.8306,\n        lng: 150.6089\n    },\n    'Kiama': {\n        lat: -34.6706,\n        lng: 150.8542\n    },\n    'Gerringong': {\n        lat: -34.7400,\n        lng: 150.8281\n    },\n    'Berry': {\n        lat: -34.7706,\n        lng: 150.6944\n    },\n    'Nowra': {\n        lat: -34.8706,\n        lng: 150.6014\n    },\n    // Additional stations\n    'Merrylands': {\n        lat: -33.8325,\n        lng: 150.9881\n    },\n    'Guildford': {\n        lat: -33.8653,\n        lng: 150.9878\n    },\n    'Telopea': {\n        lat: -33.7956,\n        lng: 151.0331\n    },\n    'Dundas': {\n        lat: -33.7928,\n        lng: 151.0522\n    },\n    'Camellia': {\n        lat: -33.8167,\n        lng: 151.0228\n    },\n    'Rosehill': {\n        lat: -33.8200,\n        lng: 151.0156\n    }\n};\nconst getModeCode = (mode)=>{\n    switch(mode){\n        case 'train':\n            return 1;\n        case 'ferry':\n            return 9;\n        case 'bus':\n            return 5;\n        case 'metro':\n            return 11;\n        default:\n            return 1;\n    }\n};\nconst parseApiResponse = (apiData, from, to, mode)=>{\n    try {\n        const journeys = apiData?.journeys || [];\n        console.log(`Found ${journeys.length} journeys to parse`);\n        return journeys.slice(0, 5).map((journey, index)=>{\n            const legs = journey.legs || [];\n            console.log(`Journey ${index + 1}: ${legs.length} legs`);\n            // Debug each leg\n            legs.forEach((leg, legIndex)=>{\n                const isWalking = leg.transportation?.product?.class === 100;\n                const isTrain = leg.transportation?.product?.class === 1;\n                let transportType = 'unknown';\n                if (isWalking) {\n                    transportType = 'walking';\n                } else if (isTrain) {\n                    transportType = leg.transportation?.product?.name || leg.transportation?.description || 'train';\n                } else {\n                    transportType = leg.transportation?.product?.name || leg.transportation?.description || 'other';\n                }\n                console.log(`  Leg ${legIndex + 1}:`, {\n                    transportation: transportType,\n                    platform: leg.origin?.platform || leg.destination?.platform,\n                    class: leg.transportation?.product?.class\n                });\n                // Debug platform information in detail for transport legs\n                if (leg.transportation && leg.transportation.product && leg.transportation.product.class === 1) {\n                    console.log(`    Train leg - Origin platform info:`, {\n                        platform: leg.origin?.platform,\n                        platformName: leg.origin?.platformName,\n                        properties: leg.origin?.properties,\n                        allOriginFields: Object.keys(leg.origin || {})\n                    });\n                    console.log(`    Train leg - Destination platform info:`, {\n                        platform: leg.destination?.platform,\n                        platformName: leg.destination?.platformName,\n                        properties: leg.destination?.properties,\n                        allDestFields: Object.keys(leg.destination || {})\n                    });\n                }\n            });\n            // Find train transport legs only (exclude walking and others)\n            const transportLegs = legs.filter((leg)=>leg.transportation && leg.transportation.product && leg.transportation.product.class === 1);\n            console.log(`  Transport legs: ${transportLegs.length}, Total legs: ${legs.length}`);\n            const firstLeg = legs[0] || {};\n            const lastLeg = legs[legs.length - 1] || {};\n            // Train legs we will use for times and platforms\n            const firstTrainLeg = transportLegs[0];\n            const lastTrainLeg = transportLegs[transportLegs.length - 1];\n            // If no train legs, skip this journey\n            if (!firstTrainLeg || !lastTrainLeg) {\n                return null;\n            }\n            // Extract departure/arrival times from TRAIN legs (not walking)\n            const trainDepartureTime = firstTrainLeg.origin?.departureTimeEstimated || firstTrainLeg.origin?.departureTimePlanned;\n            const trainArrivalTime = lastTrainLeg.destination?.arrivalTimeEstimated || lastTrainLeg.destination?.arrivalTimePlanned;\n            // Calculate duration in minutes based on TRAIN segment only\n            let durationMin = 0;\n            if (trainDepartureTime && trainArrivalTime) {\n                const depTime = new Date(trainDepartureTime);\n                const arrTime = new Date(trainArrivalTime);\n                durationMin = Math.round((arrTime.getTime() - depTime.getTime()) / 60000);\n            } else if (journey.duration) {\n                durationMin = journey.duration > 1000 ? Math.round(journey.duration / 60) : journey.duration;\n            }\n            // Extract platform information from train leg only (no guessing)\n            const trainLeg = firstTrainLeg;\n            const rawDeparturePlatform = trainLeg?.origin?.platform || trainLeg?.origin?.platformName || trainLeg?.origin?.properties?.platform || trainLeg?.origin?.properties?.RealtimeTripUpdate?.platform || trainLeg?.transportation?.origin?.platform || trainLeg?.properties?.platform || trainLeg?.stopSequence?.[0]?.platform || null;\n            const rawArrivalPlatform = trainLeg?.destination?.platform || trainLeg?.destination?.platformName || trainLeg?.destination?.properties?.platform || trainLeg?.destination?.properties?.RealtimeTripUpdate?.platform || trainLeg?.transportation?.destination?.platform || trainLeg?.properties?.platform || trainLeg?.stopSequence?.[trainLeg?.stopSequence?.length - 1]?.platform || null;\n            // Normalize platform values to numbers only (strip prefixes like CE)\n            const toNumericPlatform = (value)=>{\n                if (value === null || value === undefined) return undefined;\n                const str = String(value);\n                const match = str.match(/\\d+/);\n                return match ? match[0] : undefined;\n            };\n            const departurePlatform = toNumericPlatform(rawDeparturePlatform);\n            const arrivalPlatform = toNumericPlatform(rawArrivalPlatform);\n            // Count actual train service changes (not walking)\n            const trainLegs = transportLegs.filter((leg)=>leg.transportation?.product?.class === 1 || leg.transportation?.description?.includes('Train') || leg.transportation?.product?.name?.includes('Train'));\n            const changes = Math.max(0, trainLegs.length - 1);\n            // Get main service information from the train leg\n            let lineName = 'Sydney Trains';\n            if (trainLeg?.transportation) {\n                lineName = trainLeg.transportation.product?.name || trainLeg.transportation.product?.line || trainLeg.transportation.disassembledName || trainLeg.transportation.description || 'Sydney Trains';\n                if (lineName.includes('Network')) lineName = 'Sydney Trains';\n            }\n            return {\n                departureTime: trainDepartureTime,\n                arrivalTime: trainArrivalTime,\n                duration: durationMin,\n                changes: changes,\n                isQuickest: index === 0,\n                legs: [\n                    {\n                        mode: mode,\n                        line: lineName,\n                        departure: {\n                            time: trainDepartureTime,\n                            ...departurePlatform ? {\n                                platform: `${departurePlatform}`\n                            } : {},\n                            stop: from\n                        },\n                        arrival: {\n                            time: trainArrivalTime,\n                            ...arrivalPlatform ? {\n                                platform: `${arrivalPlatform}`\n                            } : {},\n                            stop: to\n                        }\n                    }\n                ]\n            };\n        }).filter((journey)=>journey && journey.departureTime && journey.arrivalTime); // Only valid journeys\n    } catch (error) {\n        console.error('Error parsing API response:', error);\n        return [];\n    }\n};\nasync function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    const { from, to, mode = 'train', datetime } = req.body;\n    if (!from || !to) {\n        return res.status(400).json({\n            error: 'From and to stations are required'\n        });\n    }\n    if (!TFNSW_API_KEY) {\n        return res.status(500).json({\n            error: 'TfNSW API key not configured'\n        });\n    }\n    const fromCoords = stationCoordinates[from];\n    const toCoords = stationCoordinates[to];\n    if (!fromCoords || !toCoords) {\n        return res.status(400).json({\n            error: 'Invalid station names'\n        });\n    }\n    try {\n        console.log(`Making TfNSW API request: ${from} (${fromCoords.lat}, ${fromCoords.lng}) to ${to} (${toCoords.lat}, ${toCoords.lng}) via ${mode}`);\n        const requestTime = datetime ? new Date(datetime) : new Date();\n        // Try using coordinates instead since station names aren't being recognized\n        const params = {\n            outputFormat: 'rapidJSON',\n            depArrMacro: 'dep',\n            itdDate: requestTime.toISOString().split('T')[0].replace(/-/g, ''),\n            itdTime: requestTime.toTimeString().split(' ')[0].replace(/:/g, ''),\n            type_origin: 'coord',\n            name_origin: `${fromCoords.lng}:${fromCoords.lat}:EPSG:4326`,\n            type_destination: 'coord',\n            name_destination: `${toCoords.lng}:${toCoords.lat}:EPSG:4326`,\n            calcNumberOfTrips: 5,\n            ptOptionsActive: 1,\n            coordOutputFormat: 'EPSG:4326',\n            // Add transport mode parameters for trains\n            trITMOT: 1,\n            routeType: 'LEASTTIME'\n        };\n        console.log('API Request params:', params);\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(TFNSW_API_URL, {\n            params,\n            headers: {\n                'Authorization': `apikey ${TFNSW_API_KEY}`,\n                'Accept': 'application/json'\n            },\n            timeout: 10000\n        });\n        console.log('TfNSW API Response Status:', response.status);\n        if (response.status === 200 && response.data) {\n            // Add debugging to see what we're getting\n            console.log('API Response sample:', JSON.stringify(response.data, null, 2).substring(0, 1000));\n            const parsedResults = parseApiResponse(response.data, from, to, mode);\n            if (parsedResults.length > 0) {\n                const responseData = {\n                    results: parsedResults,\n                    from,\n                    to,\n                    mode,\n                    timestamp: new Date().toISOString(),\n                    source: 'tfnsw-api'\n                };\n                console.log(`Returning ${parsedResults.length} real-time journeys from TfNSW API`);\n                return res.status(200).json(responseData);\n            }\n        }\n        // If API returns no results, provide a helpful message\n        console.log('TfNSW API returned no journey results');\n        return res.status(200).json({\n            results: [],\n            from,\n            to,\n            mode,\n            timestamp: new Date().toISOString(),\n            message: 'No journey options found for this route at this time',\n            source: 'tfnsw-api-empty'\n        });\n    } catch (error) {\n        console.error('TfNSW API error:', error.message);\n        console.error('Error details:', error.response?.data || error);\n        // Return error information only. Do not fabricate journeys.\n        return res.status(503).json({\n            error: 'Unable to fetch real-time journey information',\n            details: error.message,\n            from,\n            to,\n            mode,\n            timestamp: new Date().toISOString(),\n            message: 'The transport API is currently unavailable. Please try again later.'\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/journey.ts\n");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fjourney&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fjourney.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();